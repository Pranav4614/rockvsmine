# -*- coding: utf-8 -*-
"""rockvsmine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eOExFld6qjSi4GsSyMp1ZU6Ea2_j5lt8
"""



"""importing all the dependancies"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""data collection and processing"""

#loadind the dataset to pandas dataframe
sonar_data = pd.read_csv('/content/sonar.all-data.csv', header=None)

sonar_data.head()

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

#diff r and m
x = sonar_data.drop(columns=60, axis=1)
y = sonar_data[60]

print(x)
print(y)

"""training and test data"""

x_train, x_test , y_train , y_test = train_test_split(x,y, test_size=0.1, stratify=y, random_state=1)

print(x.shape, x_train.shape, x_test.shape)

print(x_train)
print(y_train)



"""MODEL TRAINING"""

model = LogisticRegression()

#training the data
model = model.fit(x_train, y_train)

"""MODEL ACCURACY"""

#accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("acuuracy on data :" , training_data_accuracy)

#accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("accuracy on test data :" , test_data_accuracy)

"""making prediction

"""

input_data = (0.0201,0.0178,0.0274,0.0232,0.0724,0.0833,0.1232,0.1298,0.2085,0.2720,0.2188,0.3037,0.2959,0.2059,0.0906,0.1610,0.1800,0.2180,0.2026,0.1506,0.0521,0.2143,0.4333,0.5943,0.6926,0.7576,0.8787,0.9060,0.8528,0.9087,0.9657,0.9306,0.7774,0.6643,0.6604,0.6884,0.6938,0.5932,0.5774,0.6223,0.5841,0.4527,0.4911,0.5762,0.5013,0.4042,0.3123,0.2232,0.1085,0.0414,0.0253,0.0131,0.0049,0.0104,0.0102,0.0092,0.0083,0.0020,0.0048,0.0036)
#input changing to numpy array
input_data_as_numpy_array = np.asarray(input_data)


#reshapeinng numpy array as only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 'R'):
    print('THE OBJECT IS A ROCK')
else:
  print('the object is a %%MINE%% ')